showInternalPods=显示内部 pod
showAllNamespaces=显示所有命名空间
showInternalContainers=显示内部容器
refresh=刷新
vmwareGui=启动图形用户界面
monitorVm=监控虚拟机
addCluster=添加集群 ...
showNonRunningInstances=显示非运行实例
vmwareGuiDescription=是在后台启动虚拟机，还是在窗口中启动。
vmwareEncryptionPassword=加密密码
vmwareEncryptionPasswordDescription=用于加密虚拟机的可选密码。
vmwarePasswordDescription=访客用户所需的密码。
vmwarePassword=用户密码
vmwareUser=访客用户
runTempContainer=运行临时容器
vmwareUserDescription=主要访客用户的用户名
dockerTempRunAlertTitle=运行临时容器
dockerTempRunAlertHeader=这将在临时容器中运行一个 shell 进程，一旦停止，该进程将自动删除。
imageName=图像名称
imageNameDescription=要使用的容器图像标识符
containerName=容器名称
containerNameDescription=可选的自定义容器名称
vm=虚拟机
yubikeyPiv=Yubikey PIV (Pro)
vmDescription=相关的配置文件。
vmwareScan=VMware 桌面管理程序
library=图书馆
customPkcs11Library=自定义 PKCS#11 库（专业版）
vmwareMachine.displayName=VMware 虚拟机
vmwareMachine.displayDescription=通过 SSH 连接虚拟机
vmwareInstallation.displayName=安装 VMware 桌面管理程序
vmwareInstallation.displayDescription=通过 CLI 与已安装的虚拟机交互
start=开始
stop=停止
pause=暂停
rdpTunnelHost=隧道主机
rdpTunnelHostDescription=用作隧道的可选 SSH 连接
rdpFileLocation=文件位置
rdpFileLocationDescription=.rdp 文件的文件路径
rdpPasswordAuthentication=密码验证
rdpFiles=RDP 文件
rdpPasswordAuthenticationDescription=要填写或复制到剪贴板的密码，取决于客户端支持
rdpFile.displayName=RDP 文件
rdpFile.displayDescription=通过现有 .rdp 文件连接系统
requiredSshServerAlertTitle=设置 SSH 服务器
requiredSshServerAlertHeader=无法在虚拟机中找到已安装的 SSH 服务器。
requiredSshServerAlertContent=为了连接到虚拟机，XPipe 正在寻找运行中的 SSH 服务器，但没有检测到虚拟机的可用 SSH 服务器。
computerName=计算机名称
pssComputerNameDescription=要连接的计算机名称。假定它已包含在受信任主机中。
credentialUser=凭证用户
pssCredentialUserDescription=要登录的用户。
credentialPassword=凭证密码
pssCredentialPasswordDescription=用户的密码。
sshConfig=SSH 配置文件
autostart=在 XPipe 启动时自动连接
acceptHostKey=接受主机密钥
modifyHostKeyPermissions=修改主机密钥权限
attachContainer=附加到容器
openInVsCode=在 VSCode 中打开
containerLogs=显示容器日志
openSftpClient=在外部 SFTP 客户端中打开
openTermius=在 Termius 中打开
showInternalInstances=显示内部实例
editPod=编辑舱
acceptHostKeyDescription=信任新主机密钥并继续
modifyHostKeyPermissionsDescription=尝试删除原始文件的权限，使 OpenSSH 满意
psSession.displayName=PowerShell 远程会话
psSession.displayDescription=通过 New-PSSession 和 Enter-PSSession 连接
sshLocalTunnel.displayName=本地 SSH 通道
sshLocalTunnel.displayDescription=建立连接远程主机的 SSH 通道
sshRemoteTunnel.displayName=远程 SSH 通道
sshRemoteTunnel.displayDescription=从远程主机建立反向 SSH 通道
sshDynamicTunnel.displayName=动态 SSH 通道
sshDynamicTunnel.displayDescription=通过 SSH 连接建立 SOCKS 代理
shellEnvironmentGroup.displayName=外壳环境
shellEnvironmentGroup.displayDescription=外壳环境
shellEnvironment.displayName=自定义外壳环境
shellEnvironment.displayDescription=创建自定义的 shell 启动环境
shellEnvironment.informationFormat=$TYPE$ 环境
shellEnvironment.elevatedInformationFormat=$ELEVATION$ $TYPE$ 环境
environmentConnectionDescription=创建环境的基础连接
environmentScriptDescription=在 shell 中运行的可选自定义启动脚本
environmentSnippets=脚本片段
commandSnippetsDescription=首先运行的可选预定义脚本片段
environmentSnippetsDescription=初始化时运行的可选预定义脚本片段
shellTypeDescription=要启动的显式 shell 类型
originPort=源端口
originAddress=源地址
remoteAddress=远程地址
remotePort=远程端口
remoteSourceAddress=远程源地址
remoteSourcePort=远程源端口
originDestinationPort=起始目的地端口
originDestinationAddress=起始目的地地址
origin=起源
remoteHost=远程主机
address=地址
proxmox=Proxmox
proxmox.displayName=Proxmox
proxmox.displayDescription=连接 Proxmox 虚拟环境中的系统
proxmoxVm.displayName=Proxmox VM
proxmoxVm.displayDescription=通过 SSH 连接到 Proxmox VE 中的虚拟机
proxmoxContainer.displayName=Proxmox 容器
proxmoxContainer.displayDescription=连接到 Proxmox VE 中的容器
sshDynamicTunnel.hostDescription=用作 SOCKS 代理的系统
sshDynamicTunnel.bindingDescription=将隧道绑定到哪些地址
sshRemoteTunnel.hostDescription=从哪个系统启动到原点的远程隧道
sshRemoteTunnel.bindingDescription=将隧道绑定到哪些地址
sshLocalTunnel.hostDescription=打开隧道的系统
sshLocalTunnel.bindingDescription=将隧道绑定到哪些地址
sshLocalTunnel.localAddressDescription=绑定的本地地址
sshLocalTunnel.remoteAddressDescription=要绑定的远程地址
cmd.displayName=自定义终端命令
cmd.displayDescription=在终端上运行系统自定义命令
k8sPod.displayName=Kubernetes Pod
k8sPod.displayDescription=通过 kubectl 连接 pod 及其容器
k8sContainer.displayName=Kubernetes 容器
k8sContainer.displayDescription=为容器打开外壳
k8sCluster.displayName=Kubernetes 集群
k8sCluster.displayDescription=通过 kubectl 连接到集群及其 pod
sshTunnelGroup.displayName=SSH 隧道
sshTunnelGroup.displayCategory=所有类型的 SSH 隧道
podmanCmd.displayName=Podman CLI
podmanCmd.displayCategory=通过 CLI 客户端访问 Podman 容器
podmanContainers=Podman 容器
local.displayName=本地机器
local.displayDescription=本地计算机的 shell
cygwin=Cygwin
msys2=MSYS2
gitWindows=Windows 版 Git
gitForWindows.displayName=Windows 版 Git
gitForWindows.displayDescription=访问本地 Git for Windows 环境
msys2.displayName=MSYS2
msys2.displayDescription=MSYS2 环境的访问外壳
cygwin.displayName=Cygwin
cygwin.displayDescription=访问 Cygwin 环境的 shell
namespace=名称空间
gitVaultIdentityStrategy=Git SSH 身份
gitVaultIdentityStrategyDescription=如果选择使用 SSH git URL 作为远程，且远程仓库需要 SSH 身份，则设置此选项。\n\n如果您提供的是 HTTP 网址，则可以忽略此选项。
dockerContainers=Docker 容器
lxdContainers=LXD 容器
dockerCmd.displayName=docker CLI 客户端
dockerCmd.displayDescription=通过 docker CLI 客户端访问 Docker 容器
lxdCmd.displayName=LXD CLI 客户端
lxdCmd.displayDescription=通过 lxc CLI 方便地访问 LXD 容器
wslCmd.displayName=wsl 客户端
wslCmd.displayDescription=通过 wsl CLI 方便地访问 WSL 实例
k8sCmd.displayName=kubectl 客户端
k8sCmd.displayDescription=通过 kubectl 访问 Kubernetes 集群
k8sClusters=Kubernetes 集群
shells=可用外壳
startContainer=启动容器
stopContainer=停止容器
inspectContainer=检查容器
inspectContext=检查上下文
k8sClusterNameDescription=群组所处上下文的名称。
pod=花苞
podName=舱名
k8sClusterContext=语境
k8sClusterContextDescription=群组所处上下文的名称
k8sClusterNamespace=名称空间
k8sClusterNamespaceDescription=自定义命名空间或默认命名空间（如果为空
k8sConfigLocation=配置文件
k8sConfigLocationDescription=自定义的 kubeconfig 文件或默认文件（如果留空）。
inspectPod=检查舱
showAllContainers=显示未运行的容器
showAllPods=显示未运行的 pod
k8sPodHostDescription=pod 所在主机
k8sContainerDescription=Kubernetes 容器的名称
k8sPodDescription=Kubernetes pod 的名称
podDescription=容器所在的 pod
k8sClusterHostDescription=访问群集的主机。必须安装并配置 kubectl 才能访问群集。
script=初始脚本
connection=连接
shellCommand.displayName=自定义外壳打开器命令
shellCommand.displayDescription=通过自定义命令打开标准 shell
ssh.displayName=简单 SSH 连接
ssh.displayDescription=通过 SSH 命令行客户端连接
sshConfig.displayName=SSH 配置文件
sshConfig.displayDescription=连接 SSH 配置文件中定义的主机
sshConfigHost.displayName=SSH 配置文件主机
sshConfigHost.displayDescription=连接到 SSH 配置文件中定义的主机
sshConfigHost.password=密码
sshConfigHost.passwordDescription=为用户登录提供可选密码。
sshConfigHost.identityPassphrase=身份密码
sshConfigHost.identityPassphraseDescription=提供身份密钥的可选口令。
shellCommand.hostDescription=执行命令的主机
shellCommand.commandDescription=打开 shell 的命令
sshAgent=SSH 代理
none=无
commandDescription=在主机上执行 shell 脚本的命令。
commandHostDescription=运行命令的主机
commandDataFlowDescription=该命令如何处理输入和输出
commandElevationDescription=以提升的权限运行此命令
commandShellTypeDescription=该命令使用的 shell
ssh.passwordDescription=验证时使用的可选密码
keyAuthentication=基于密钥的身份验证
keyAuthenticationDescription=如果需要基于密钥的身份验证，应使用的身份验证方法。
dontInteractWithSystem=不与系统交互（专业版）
dontInteractWithSystemDescription=不要试图识别外壳类型，这对于有限的嵌入式系统或物联网设备是必要的
sshForwardX11=转发 X11
sshForwardX11Description=为连接启用 X11 转发
customAgent=自定义代理
identityAgent=身份代理
ssh.proxyDescription=建立 SSH 连接时使用的可选代理主机。必须已安装 ssh 客户端。
usage=使用方法
wslHostDescription=WSL 实例所在的主机。必须已安装 wsl。
wslDistributionDescription=WSL 实例的名称
wslUsernameDescription=要登录的明确用户名。如果未指定，将使用默认用户名。
wslPasswordDescription=用户密码，可用于执行 sudo 命令。
dockerHostDescription=docker 容器所在的主机。必须已安装 docker。
dockerContainerDescription=docker 容器的名称
lxdHostDescription=LXD 容器所在的主机。必须已安装 lxc。
lxdContainerDescription=LXD 容器的名称
localMachine=本地机器
rootScan=根 shell 环境
loginEnvironmentScan=自定义登录环境
k8sScan=Kubernetes 集群
options=选项
dockerRunningScan=运行 docker 容器
dockerAllScan=所有 docker 容器
wslScan=WSL 实例
sshScan=SSH 配置连接
requiresElevation=提升运行
default=默认值
wslHost=WSL 主机
timeout=超时
installLocation=安装位置
installLocationDescription=$NAME$ 环境的安装位置
wsl.displayName=Linux 下的 Windows 子系统
wsl.displayDescription=连接到在 Windows 上运行的 WSL 实例
docker.displayName=Docker 容器
docker.displayDescription=连接到 docker 容器
podman.displayName=Podman 容器
podman.displayDescription=连接到 Podman 容器
lxd.displayName=LXD 容器
lxd.displayDescription=通过 lxc 连接到 LXD 容器
container=容器
host=主机
port=端口
user=用户
password=密码
method=方法
uri=网址
proxy=代理
distribution=分发
username=用户名
shellType=外壳类型
browseFile=浏览文件
openShell=在终端中打开 Shell
openCommand=在终端中执行命令
editFile=编辑文件
description=说明
keyFile=身份文件
keyPassword=密码
key=关键字
furtherCustomization=进一步定制
furtherCustomizationDescription=有关更多配置选项，请使用 ssh 配置文件
location=地点
browse=浏览
locationDescription=相应私钥的文件路径
configHost=主机
configHostDescription=配置所在的主机
configLocation=配置位置
configLocationDescription=配置文件的文件路径
pageant=页面
gpgAgent=GPG 代理（专业版）
gateway=网关
gatewayDescription=连接时使用的可选网关。
connectionInformation=连接信息
connectionInformationDescription=连接哪个系统
passwordAuthentication=密码验证
passwordDescription=用于验证的可选密码。
sshConfigString.displayName=定制 SSH 连接
sshConfigString.displayDescription=创建完全自定义的 SSH 连接
sshConfigStringContent=配置
sshConfigStringContentDescription=OpenSSH 配置格式的 SSH 连接选项
vnc.displayName=VNC 连接
vnc.displayDescription=通过 SSH 通道打开 VNC 会话
binding=装订
vncPortDescription=VNC 服务器监听的端口
vncUsername=用户名
vncUsernameDescription=可选的 VNC 用户名
vncPassword=密码
vncPasswordDescription=VNC 密码
x11WslInstance=X11 Forward WSL 实例
x11WslInstanceDescription=在 SSH 连接中使用 X11 转发时，用作 X11 服务器的本地 Windows Subsystem for Linux 发行版。该发行版必须是 WSL2 发行版。\n\n需要重新启动才能应用。
openAsRoot=以根用户身份打开
openInVsCodeRemote=在 VSCode 远程中打开
openInWSL=在 WSL 中打开
launch=启动
sshTrustKeyHeader=主机密钥未知，您已启用手动主机密钥验证。
sshTrustKeyTitle=未知主机密钥
vnc=VNC 连接
rdpTunnel.displayName=通过 SSH 进行 RDP 连接
rdpTunnel.displayDescription=通过 RDP 在隧道 SSH 连接上进行连接
rdpEnableDesktopIntegration=启用桌面集成
rdpEnableDesktopIntegrationDescription=运行远程应用程序，假设 RDP 允许列表允许这样做
rdpSetupAdminTitle=需要 RDP 设置
rdpSetupAllowTitle=RDP 远程应用程序
rdpSetupAllowHeader=本系统目前不允许直接启动远程应用程序。您想启用它吗？
rdpSetupAllowContent=通过禁用 RDP 远程应用程序的允许列表，您可以直接从 XPipe 运行远程应用程序。
rdp=RDP
wslX11SetupTitle=WSL X11 设置
wslX11SetupHeader=XPipe 可以使用本地 WSL 发布作为 X11 显示服务器。您想在$DIST$ 上设置 X11 吗？
wslX11SetupContent=这将在 WSL 发行版上安装基本的 X11 软件包，可能需要一些时间。你也可以在设置菜单中更改使用哪个发行版。
command=指令
commandGroup=命令组
vncSystem=VNC 目标系统
vncSystemDescription=实际交互系统。通常与隧道主机相同
vncHost=远程隧道主机
vncHostDescription=运行 VNC 服务器的系统
gitVaultTitle=Git 数据库
gitVaultForcePushHeader=您想强制推送到远程存储库吗？
gitVaultForcePushContent=这将用本地存储库完全替换所有远程存储库的内容，包括历史记录。
gitVaultOverwriteLocalHeader=您想覆盖本地保险库吗？
gitVaultOverwriteLocalContent=这将用远程存储库完全替换所有本地内容，包括历史记录。
rdpSimple.displayName=简单的 RDP 连接
rdpSimple.displayDescription=通过 RDP 连接到主机
rdpUsername=用户名
rdpUsernameDescription=用户以
addressDescription=连接到哪里
rdpAdditionalOptions=其他 RDP 选项
rdpAdditionalOptionsDescription=要包含的原始 RDP 选项，格式与 .rdp 文件相同
proxmoxVncConfirmTitle=VNC 设置
proxmoxVncConfirmHeader=您要为虚拟机启用 VNC 吗？
proxmoxVncConfirmContent=这将设置一个可访问的 VNC 服务器，并重新启动虚拟机。然后，您应等待虚拟机再次启动后再进行连接。
dockerContext.displayName=Docker 上下文
dockerContext.displayDescription=与位于特定环境中的容器交互
containerActions=容器操作
vmActions=虚拟机操作
dockerContextActions=上下文操作
k8sPodActions=Pod 操作
